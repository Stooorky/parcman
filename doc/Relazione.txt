INTRODUZIONE A PARCMAN
Il progetto Parcman consiste nello sviluppo di una rete di file-sharing utilizzando le tecnologie messe a disposizione da Java e Java RMI.
Parcman si divide essenzialmente in 2 componenti principali:
        *       infrastruttura persistente di rete
        *       infrastruttura non persistente di rete
Nella infrastruttura persistente di rete troviamo i seguenti server:
    - server centrale (ParcmanServer)
    - server di indicizzazione (IndexingServer)
    - server di login (LoginServer)
    - server database (DatabaseServer)
    - server di log (LogServer)
    - l'agente mobile di aggiornamento (ParcmanAgent)

Nell'infrastruttura non persistente di rete troviamo:
    - il client di bootstrap (ClientBootstrap)
    - il client di servizio (RemoteClient)
    - il client principale (ParcmanClient)

IL SERVER CENTRALE
Il ParcmanServer si occupa di gestire ogni richiesta degli utenti connessi, nonché di fornire ogni informazione sugli utenti al server di indicizzazione.

Interface RemoteParcmanServer

public interface RemoteParcmanServer
extends RemoteParcmanServerUser, Remote, Serializable

Interfaccia remota del ParcmanServer.

Method Summary
 void 	addToBlacklist(RemoteParcmanClient parcmanClientStub, String userName, String userForBlacklist)
          Aggiunge un utente in blacklist.
 void 	connect(RemoteParcmanClient parcmanClientStub, String userName)
          Esegue la connessione di un nuovo RemoteParcmanClient alla rete Parcman.
 void 	delFromBlacklist(RemoteParcmanClient parcmanClientStub, String userName, String userForBlacklist)
          Rimuove un utente dalla blacklist.
 void 	disconnect(RemoteParcmanClient parcmanClientStub, String userName)
          Esegue la disconnessione di RemoteParcmanClient dalla rete Parcman.
 boolean 	getAgentSystemStatus(RemoteParcmanClient parcmanClientStub, String userName)
          Ritorna lo stato del sistema di gestione degli agenti remoti.
 Vector<String> 	getConnectUsersList(RemoteParcmanClient parcmanClientStub, String userName)
          Restituisce lla lista degli utenti connessi.
 Vector<ShareBean> 	getSharings(RemoteParcmanClient parcmanClientStub, String userName)
          Restituisce la lista file condivisi dell'utente.
 int 	getSharingsVersion(RemoteParcmanClient parcmanClientStub, String userName)
          Restituisce il numero di versione dei file condivisi dell'utente.
 void 	ping()
          Ping.
 Vector<SearchBean> 	search(RemoteParcmanClient parcmanClientStub, String userName, String keywords)
          Restituisce il risultato di una ricerca sul database.
 void 	setAgentSystemStatus(RemoteParcmanClient parcmanClientStub, String userName, boolean status)
          Imposta lo stato del sistema di gestione degli agenti remoti.
 DownloadData 	startDownload(RemoteParcmanClient parcmanClientStub, String userName, String[] fileData)
          Inizializza il download di un file.

Interface RemoteParcmanServerUser

public interface RemoteParcmanServerUser
extends Remote, Serializable

Interfaccia remota del ParcmanServer per gli utenti.

Method Summary
 void 	connect(RemoteParcmanClient parcmanClientStub, String userName)
          Esegue la connessione di un nuovo RemoteParcmanClient alla rete Parcman.
 void 	disconnect(RemoteParcmanClient parcmanClientStub, String userName)
          Esegue la disconnessione di RemoteParcmanClient dalla rete Parcman.
 boolean 	getAgentSystemStatus(RemoteParcmanClient parcmanClientStub, String userName)
          Ritorna lo stato del sistema di gestione degli agenti remoti.
 Vector<String> 	getConnectUsersList(RemoteParcmanClient parcmanClientStub, String userName)
          Restituisce lla lista degli utenti connessi.
 Vector<ShareBean> 	getSharings(RemoteParcmanClient parcmanClientStub, String userName)
          Restituisce la lista file condivisi dell'utente.
 int 	getSharingsVersion(RemoteParcmanClient parcmanClientStub, String userName)
          Restituisce il numero di versione dei file condivisi dell'utente.
 void 	ping()
          Ping.
 Vector<SearchBean> 	search(RemoteParcmanClient parcmanClientStub, String userName, String keywords)
          Restituisce il risultato di una ricerca sul database.
 void 	setAgentSystemStatus(RemoteParcmanClient parcmanClientStub, String userName, boolean status)
          Imposta lo stato del sistema di gestione degli agenti remoti.
 DownloadData 	startDownload(RemoteParcmanClient parcmanClientStub, String userName, String[] fileData)
          Inizializza il download di un file.

SERVER DI INDICIZZAZIONE
L'IndexingServer si occupa della gestione dell'indicizzazione dei file presenti attualmente nella rete; invia ad intervalli regolari degli agenti remoti nella rete parcman per raccogliere informazioni presso i client connessi; informazioni che, dopo un adeguato parsing, verranno inserite all'interno del database.

Interface RemoteIndexingServer

public interface RemoteIndexingServer
extends RemoteIndexingServerAgent, Remote

Interfaccia remota del ParcmanServer.

Interface RemoteIndexingServerAgent

public interface RemoteIndexingServerAgent
extends Remote

Interfaccia remota del ParcmanServer per il ParcmanAgent.

Method Summary
 void 	ping()
          Ping.
 void 	sendUpdateLists(Map<String,ClientDataForAgent> updateLists, long validity, int identify)
          Esegue l'update della lista di file condivisi a partire dalla mappa updateLists.

SERVER DI LOGIN
Come suggerisce il nome, tale server si occupa del login degli utenti alla rete parcman, permettendo anche la creazione di nuovi utenti.

Interface RemoteLoginServer

public interface RemoteLoginServer
extends java.rmi.Remote

Interfaccia remota del LoginServer.

Method Summary
 void   createAccount(java.lang.String name, java.lang.String password)
          Esegue la registrazione di un nuovo account.
 RemoteParcmanClient    login(java.lang.String name, java.lang.String password)
          Esegue il login di un Client alla rete Parcman.
 void   ping()
          Ping.

SERVER DI DATABASE
Tale server si occupa di gestire le informazioni degli utenti, dati di autenticazione e informazioni sui file condivisi.
Il salvataggio delle informazioni avviene su file XML.

Interface RemoteDBServer

public interface RemoteDBServer
extends java.rmi.Remote

Interfaccia remota del DBServer.

Method Summary
 void   addShare(ShareBean share)
          Aggiunge un file condiviso al database.
 void   addUser(UserBean user)
          Aggiunge un utente al database.
 ShareBean      getShare(java.lang.String owner, java.lang.String id)
          Restituisce lo ShareBean di un utente.
 java.util.Vector<ShareBean>    getSharings(java.lang.String userName)
          Restituisce la lista Sharings di un utente.
 UserBean       getUser(java.lang.String name)
          Restituisce i dati di un utente a partire dal nome.
 java.util.Vector<UserBean>     getUsers()
          Ritorna la lista degli utenti registrati nel database.
 void   ping()
          Ping.
 void   reloadShares()
          Aggiorna il database dei file condivisi.
 void   reloadUsers()
          Aggiorna il database degli utenti.
 void   removeShare(int id, java.lang.String owner)
          Rimuove un file condiviso dal database.
 java.util.Vector<SearchBean>   searchFiles(java.lang.String keywords)
          Esegue una ricerca di file sul database.
 void   updateUsers()
          Esegue il salvataggio del database utenti aggiornandolo.

SERVER DI LOG
Il server di log, permette la centralizzaizone dei log remoti; questo server è progettato per l'uso durante la fase implementativa e di debug.
Dato che crea una comunicazione tra i parcmanAgent e l'infratruttura presente sulle macchine server, il suo uso è sconsigliato in un ambiente produttivo.

Interface RemoteLogServer

public interface RemoteLogServer
extends java.rmi.Remote, java.io.Serializable

Interfaccia remota del server di log.

Method Summary
 void   debug(java.lang.String msg)
           
 void   debug(java.lang.String[] msg)
           
 void   debug(java.lang.String[] msg, java.lang.Throwable e)
           
 void   debug(java.lang.String msg, java.lang.Throwable e)
           
 void   error(java.lang.String msg)
           
 void   error(java.lang.String[] msg)
           
 void   error(java.lang.String[] msg, java.lang.Throwable e)
           
 void   error(java.lang.String msg, java.lang.Throwable e)
           
 void   info(java.lang.String msg)
           
 void   info(java.lang.String[] msg)
           
 void   info(java.lang.String[] msg, java.lang.Throwable e)
           
 void   info(java.lang.String msg, java.lang.Throwable e)
           
 void   log(java.lang.String msg)
           
 void   log(java.lang.String[] msg)
           
 void   log(java.lang.String[] msg, java.lang.Throwable e)
           
 void   log(java.lang.String msg, java.lang.Throwable e)
           
 void   warning(java.lang.String msg)
           
 void   warning(java.lang.String[] msg)
           
 void   warning(java.lang.String[] msg, java.lang.Throwable e)
           
 void   warning(java.lang.String msg, java.lang.Throwable e)

L'AGENTE MOBILE
Il ParcmanAgent, cuore del sistema di indicizzazione, è un agente remoto il cui scopo è la raccolta di informazioni presso i client connessi alla rete parcman.
Tutte le informazioni specifiche sul sistema di indicizzazione sono esposte in dettaglio nella spiegazione del sistema stesso.

Interface RemoteParcmanAgent

public interface RemoteParcmanAgent
extends RemoteParcmanAgentClient, java.rmi.Remote

Interfaccia remota del ParmanAgent

Method Summary
 void   start() 

Interface RemoteParcmanAgentClient

public interface RemoteParcmanAgentClient
extends java.rmi.Remote

Interfaccia remota del ParmanAgent

Method Summary
 void   run()
          Avvia l'esecuzione del ParcmanAgent.

UTILIZZO DEL SOFTWARE

- SISTEMA DI LOGIN

- SISTEMA DI INDICIZZAZIONE

- STRUTTURA DEL DATABASE


